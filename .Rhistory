library("class", lib.loc="C:/Program Files/R/R-3.3.1/library")
detach("package:class", unload=TRUE)
demo(Japanese)
demo()
demo(colors)
setwd("~/UNI/Master/Estadistica/Task 2 practice statistics-20191117")
plot(hclust(dist(bladder[, c(25:50)],method="euclidian"),method="average"))
plot(hclust(dist(bladder[, c(25:50)],method="euclidian"),method="average"))
dist <- dist(bladder[, c(25:50)],method="euclidian")
diam <- as.matrix(dist)
dim(diam)
diam[1:10]
kmeans2<-kmeans(dist,2)
head(kmeans2)
plot(dist, col = kmeans2$cluster)
plot(dist, col = kmeans2$cluster)
points(kmeans2$centers,col = 1:2, pch = 8, cex=2)
diam[1:10]
dist1 <- dist(bladder[, c(25:50)],method="euclidian")
diam <- as.matrix(dist)
diam <- as.matrix(dist1)
dim(diam)
diam[1:10]
plot(hclust(dist1,method="average"))
plot(hclust(dist1,method="ward.D2"))
kmeans2<-kmeans(dist,2)
plot(dist, col = kmeans2$cluster)
points(kmeans2$centers,col = 1:2, pch = 8, cex=2)
data16<-t(bladder[, c(25:50)])
distind <- dist(data16,method="euclidian")
distind <- as.matrix(distind)
dim(distind)
hc<-hclust(dist(data16,method="euclidian"),method="ward.D2")
plot(hc)
hc<-hclust(dist(data16,method="euclidian"),method="average")
plot(hc)
plot(data16, col = kmeans2$cluster)
points(kmeans2$centers,col = 1:2, pch = 8, cex=2)
points(kmeans2$centers,col = 1:2, pch = 8, cex=2)
plot(data16, col = kmeans2$cluster)
points(kmeans2$centers,col = 1:2, pch = 8, cex=2)
gen.dis.ass<-glm(bladder$gender~bladder$y, family=binomial())
gen.dis.ass
summary(gen.dis.ass)
exp(summary(gen.dis.ass)$coefficients[2,1])
gen.dis.ass<-glm(bladder$gender~bladder$y, family=binomial())
tableOR<-table(bladder$gender,bladder$y)
tableOR
oddsratio<-231*84/(226*68)
oddsratio
gen.dis.ass <- glm(bladder$gender~bladder$y, family=binomial())
bladder$y <- factor(bladder$y, levels = c(0,1),labels = c("control", "case"))
bladder$gender <- factor(bladder$gender, levels = c(1,2), labels = c("male","female"))
gen.dis.ass <- glm(bladder$gender~bladder$y, family=binomial())
gen.dis.ass
summary(gen.dis.ass)
exp(summary(gen.dis.ass)$coefficients[2,1])
meth.gene.ass <- glm(bladder$methyl~bladder$gene1+bladder$gene2+bladder$gene3
+bladder$gene4+bladder$gene5+bladder$gene6+bladder$gene7
+bladder$gene8+bladder$gene9+bladder$gene10+bladder$gene11
+bladder$gene12+bladder$gene13+bladder$gene14+bladder$gene15
+bladder$gene16+bladder$gene17+bladder$gene18+bladder$gene19
+bladder$gene20, family=binomial())
summary(meth.gene.ass)
dis.gene.ass <- glm(bladder$y~bladder$gene1+bladder$gene2+bladder$gene3
+bladder$gene4+bladder$gene5+bladder$gene6+bladder$gene7
+bladder$gene8+bladder$gene9+bladder$gene10+bladder$gene11
+bladder$gene12+bladder$gene13+bladder$gene14+bladder$gene15
+bladder$gene16+bladder$gene17+bladder$gene18+bladder$gene19
+bladder$gene20, family=binomial())
forwardmodel<-step(dis.gene.ass,direction="forward")
summary(forwardmodel)
backwardmodel<-step(dis.gene.ass,direction="backward")
summary(backwardmodel)
best.model
summary(best.model)
best.model <- glm(bladder$y~bladder$gene3+bladder$gene5+bladder$gene8+
bladder$gene17+bladder$gene19)
best.model <- glm(bladder$y~bladder$gene3+bladder$gene5+bladder$gene8+
bladder$gene17+bladder$gene19,family = binomial())
summary(best.model)
library(ROCR)
lp<-best.model$linear.predictors
pred <- prediction(lp, bladder$y)
perf <- performance(pred, "tpr", "fpr" )
plot(perf)
perf <- performance(-pred, "tpr", "fpr" )
plot(perf)
plot(-perf)
pred <- prediction(-lp, bladder$y)
perf <- performance(pred, "tpr", "fpr" )
plot(perf)
abline(a=0, b= 1)
title("ROC curve for best.model; bladder.1 data")
auc<-slot(performance(pred,"auc"), "y.values")[[1]]
auc
K <- 5
n <- nrow(bladder)  #number of individuals
fold <- sample(as.numeric(cut((1:n),breaks = K)))  # random assignment of each individual into one fold
fold
pred <- NULL # vector of predictions
for(i in 1:K){
indTest <- which(fold==i)   # Test indices
indTrain <- which(fold!=i)  # Train indices
model.i <- glm(chd~smk+age, data=Data[indTrain,], family=binomial())  # Adjust the model with training data
pred.i <- predict(model.i, newdata=Data[indTest, ])   # Predicts test data at step i
pred[indTest] <- pred.i   # Store predicted values for test data at step i
}
for(i in 1:K){
indTest <- which(fold==i)   # Test indices
indTrain <- which(fold!=i)  # Train indices
model.i <- glm(bladder$y~bladder$gene3+bladder$gene5+bladder$gene8+
bladder$gene17+bladder$gene19) data=bladder[indTrain,], family=binomial()  # Adjust the model with training data
pred.i <- predict(model.i, newdata=bladder[indTest, ])   # Predicts test data at step i
pred[indTest] <- pred.i   # Store predicted values for test data at step i
}
for(i in 1:K){
indTest <- which(fold==i)   # Test indices
indTrain <- which(fold!=i)  # Train indices
model.i <- glm(bladder$y~bladder$gene3+bladder$gene5+bladder$gene8+
bladder$gene17+bladder$gene19) data=bladder[indTrain,] family=binomial()  # Adjust the model with training data
pred.i <- predict(model.i, newdata=bladder[indTest, ])   # Predicts test data at step i
pred[indTest] <- pred.i   # Store predicted values for test data at step i
}
pred <- NULL # vector of predictions
for(i in 1:K){
indTest <- which(fold==i)   # Test indices
indTrain <- which(fold!=i)  # Train indices
model.i <- glm(bladder$y~bladder$gene3+bladder$gene5+bladder$gene8+
bladder$gene17+bladder$gene19, data=bladder[indTrain,], family=binomial())  # Adjust the model with training data
pred.i <- predict(model.i, newdata=bladder[indTest, ])   # Predicts test data at step i
pred[indTest] <- pred.i   # Store predicted values for test data at step i
}
prediction <- prediction(pred, bladder$y)
perf <- performance(prediction, "tpr", "fpr" )
plot(perf)
abline(a=0, b= 1)
auc<-slot(performance(prediction,"auc"), "y.values")[[1]]
auc
low.high<-function(x){
gene<-NULL
for (i in 1:length(x)){
if (x[i] > 0){gene <-c(gene, "high")}
else { gene <-c(gene, "low")}
}
gene <- factor(gene,levels = c("high","low"), labels = c("high","low"))
return(gene)
}
j<-1
for (x in bladder[,4:23]){
assign(paste("levels.gene", j, sep = ""),low.high(x))
j<-j+1
}
gen.dis.ass <- glm(bladder$gender~bladder$y, family=binomial())
gen.dis.ass
summary(gen.dis.ass)
View(bladder)
bladder2 <- bladder[,4:23]
bladder2 <- bladder[,4:23]
genes <- ifelse(bladder2>=0,"high","low")
colnames(genes) <- paste(rep("gene",20),seq(1,20,1),sep="")
bladder2 <- data.frame(bladder2,genes)
bladder2
View(bladder2)
bladder2 <- bladder[,4:23]
genes <- ifelse(bladder2>=0,"high","low")
colnames(genes) <- paste(rep("levels.gene",20),seq(1,20,1),sep="")
bladder2 <- data.frame(bladder2,genes)
bladder2
bladder2 <- bladder[,4:23]
genes <- ifelse(bladder2>=0,"high","low")
colnames(genes) <- paste(rep("levels.gene",20),seq(1,20,1),sep="")
bladder2 <- data.frame(genes)
bladder2
head(bladder2)
