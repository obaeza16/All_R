---
title: "Practical Exercises Statistics"
author: "Ã“scar Baeza Francisoud"
date: "28/11/2019"
output:
  html_document:
    toc: true
    toc_float: true
    theme: cerulean
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r chunk2}
rm(list=ls())
setwd("~/UNI/Master/Estadistica/Task 2 practice statistics-20191117")
bladder <- read.csv(file = "bladder.1.txt",header = TRUE,sep = "")
head(bladder)
```

AAA

```{r chunk3}
bladder$y <- factor(bladder$y, levels = c(0,1),labels = c("control", "case"))
bladder$gender <- factor(bladder$gender, levels = c(1,2), labels = c("male","female"))
head(bladder)
```

AAA

```{r chunk4}
freq.y <- table(bladder$y)  #absolute frequency
freq.y   
relfreq.y <- prop.table(table(bladder$y))   #relative frequency
relfreq.y   
totfreq.y <- cbind(freq.y,relfreq.y)   #unite both tables
totfreq.y
```


```{r chunk5}
freq.gen <- table(bladder$gender)  #absolute frequency
freq.gen   
relfreq.gen <- prop.table(table(bladder$gender))   #relative frequency
relfreq.gen   
totfreq.gen <- cbind(freq.gen,relfreq.gen)   #unite both tables
totfreq.gen
```
```{r chunk6}
plot(bladder$gender, bladder$gene1,xlab="Gender",ylab="Gene1 Expression",
     main="Gene1 Expression Levels as a function of gender")
```
```{r chunk7}
pval <- do.call(rbind, lapply(bladder[4:23], function(x) shapiro.test(x)[c("p.value")]))
nonorm <- (pval<0.05)
nonorm <- subset(nonorm, nonorm == "TRUE")
nonorm
```
```{r chunk8}
diff <- bladder$gene1-bladder$gene2
t.test(diff,mu = 0)
```
```{r chunk9}
var.test(bladder$gene1~bladder$y)
t.test(bladder$gene1~bladder$y, var.equal=T)
```
```{r chunk10}

library(boot)
bootfun<-function(data,N){
  quant_20 <- NULL
  for (i in 1:N) {
    newsample <- sample(data,length(data),replace = T)
    quant_20 <- c(quant_20, quantile(newsample,probs = 0.2))
  }
return(quant_20)  
}

boot20 <- bootfun(bladder$gene1,10000)
confidn <- c(quantile(boot20,0.025),quantile(boot20,0.975))
confidn
quantile(bladder$gene1,.2)
```
```{r chunk11}
Hecho en un ejemplo?
```
```{r chunk12}
chisq.test(x = bladder$gender,y = bladder$y)

gen.dis.ass <- glm(bladder$gender~bladder$y, family=binomial()) 
gen.dis.ass
summary(gen.dis.ass)
exp(summary(gen.dis.ass)$coefficients[2,1])
#The OR is 1.263
#No te sentit ja que no estan associades

tableOR<-table(bladder$gender,bladder$y)
tableOR
oddsratio<-231*84/(226*68)
oddsratio
#We confirm the OR found before
```
```{r chunk13}
meth.gene.ass <- glm(bladder$methyl~bladder$gene1+bladder$gene2+bladder$gene3
                     +bladder$gene4+bladder$gene5+bladder$gene6+bladder$gene7
                     +bladder$gene8+bladder$gene9+bladder$gene10+bladder$gene11
                     +bladder$gene12+bladder$gene13+bladder$gene14+bladder$gene15
                     +bladder$gene16+bladder$gene17+bladder$gene18+bladder$gene19
                     +bladder$gene20, family=binomial())
summary(meth.gene.ass)
```
```{r chunk14}
dis.gene.ass <- glm(bladder$y~bladder$gene1+bladder$gene2+bladder$gene3
                    +bladder$gene4+bladder$gene5+bladder$gene6+bladder$gene7
                    +bladder$gene8+bladder$gene9+bladder$gene10+bladder$gene11
                    +bladder$gene12+bladder$gene13+bladder$gene14+bladder$gene15
                    +bladder$gene16+bladder$gene17+bladder$gene18+bladder$gene19
                    +bladder$gene20, family=binomial())


bothmodel<-step(dis.gene.ass,direction="both")
summary(bothmodel)

best.model <- glm(bladder$y~bladder$gene3+bladder$gene5+bladder$gene8+
                    bladder$gene17+bladder$gene19,family = binomial())

summary(best.model)
```
```{r chunk15}
library(ROCR)
lp<-best.model$linear.predictors
pred <- prediction(-lp, bladder$y)
perf <- performance(pred, "tpr", "fpr" )
plot(perf)
abline(a=0, b= 1)
title("ROC curve for best.model; bladder.1 data")

auc<-slot(performance(pred,"auc"), "y.values")[[1]]
auc
```
```{r chunk15}
K <- 5
n <- nrow(bladder)  #number of individuals
fold <- sample(as.numeric(cut((1:n),breaks = K)))  # random assignment of each individual into one fold 
fold

pred <- NULL # vector of predictions

pred <- NULL # vector of predictions

for(i in 1:K){
  indTest <- which(fold==i)   # Test indices 
  indTrain <- which(fold!=i)  # Train indices
  model.i <- glm(bladder$y~bladder$gene3+bladder$gene5+bladder$gene8+
                   bladder$gene17+bladder$gene19, data=bladder[indTrain,], family=binomial())  # Adjust the model with training data
  pred.i <- predict(model.i, newdata=bladder[indTest, ])   # Predicts test data at step i
  pred[indTest] <- pred.i   # Store predicted values for test data at step i 
}  

prediction <- prediction(pred, bladder$y) 
perf <- performance(prediction, "tpr", "fpr" )
plot(perf)
abline(a=0, b= 1)

auc<-slot(performance(prediction,"auc"), "y.values")[[1]]
auc
```
```{r chunk15}
bladder2 <- bladder[,4:23]
genes <- ifelse(bladder2>=0,"high","low")
colnames(genes) <- paste(rep("levels.gene",20),seq(1,20,1),sep="")
bladder2 <- data.frame(genes)
head(bladder2)
str(bladder2$levels.gene1)
```
```{r chunk15}
pvalues <- NULL
names <- NULL
positions <- grep("levels.gene",ls())
positions
```
```{r chunk15}
dist1 <- dist(bladder[, c(25:50)],method="euclidian")
diam <- as.matrix(dist1)
dim(diam)
diam[1:10]

plot(hclust(dist1,method="average"))
plot(hclust(dist1,method="ward.D2"))

kmeans2<-kmeans(dist1,2)
plot(dist1, col = kmeans2$cluster)
points(kmeans2$centers,col = 1:2, pch = 8, cex=2)
```
```{r chunk15}
data16<-t(bladder[, c(25:50)])
distind <- dist(data16,method="euclidian")
distind <- as.matrix(distind)
dim(distind)

plot(hclust(dist(data16,method="euclidian"),method="ward.D2"))
plot(hclust(dist(data16,method="euclidian"),method="average"))

kmeans3<-kmeans(data16,2)
head(kmeans3)

plot(data16, col = kmeans3$cluster)
points(kmeans3$centers,col = 1:2, pch = 8, cex=2)
```